PARAGRAPH{content='Consider the creation of many different threads. But this is a more general solution and easier to understand, so while the previous example shows a coding style you’ll often see, I can’t recommend it for most cases because it’s just a little bit more confusing and less flexible.}
SENTENCE{content='Consider the creation of many different threads.}
WORD{content='Consider}
WORD{content='the}
WORD{content='creation}
WORD{content='of}
WORD{content='many}
WORD{content='different}
WORD{content='threads}

SENTENCE{content=' But this is a more general solution and easier to understand, so while the previous example shows a coding style you’ll often see, I can’t recommend it for most cases because it’s just a little bit more confusing and less flexible.}
WORD{content='But}
WORD{content='this}
WORD{content='is}
WORD{content='a}
WORD{content='more}
WORD{content='general}
WORD{content='solution}
WORD{content='and}
WORD{content='easier}
WORD{content='to}
WORD{content='understand}
WORD{content='so}
WORD{content='while}
WORD{content='the}
WORD{content='previous}
WORD{content='example}
WORD{content='shows}
WORD{content='a}
WORD{content='coding}
WORD{content='style}
WORD{content='you}
WORD{content='ll}
WORD{content='often}
WORD{content='see}
WORD{content='I}
WORD{content='can}
WORD{content='t}
WORD{content='recommend}
WORD{content='it}
WORD{content='for}
WORD{content='most}
WORD{content='cases}
WORD{content='because}
WORD{content='it}
WORD{content='s}
WORD{content='just}
WORD{content='a}
WORD{content='little}
WORD{content='bit}
WORD{content='more}
WORD{content='confusing}
WORD{content='and}
WORD{content='less}
WORD{content='flexible}


PARAGRAPH{content='The following example repeats the form of the examples above with counters and toggle buttons. But now all the information for a particular counter, including the button and text field, is inside its own object that is inherited from Thread. All the fields in Ticker are private, which means that the Ticker implementation can be changed at will, including the quantity and type of data components to acquire and display information. When a Ticker object is created, the constructor adds its visual components to the content pane of the outer object:}
SENTENCE{content='The following example repeats the form of the examples above with counters and toggle buttons.}
WORD{content='The}
WORD{content='following}
WORD{content='example}
WORD{content='repeats}
WORD{content='the}
WORD{content='form}
WORD{content='of}
WORD{content='the}
WORD{content='examples}
WORD{content='above}
WORD{content='with}
WORD{content='counters}
WORD{content='and}
WORD{content='toggle}
WORD{content='buttons}

SENTENCE{content=' But now all the information for a particular counter, including the button and text field, is inside its own object that is inherited from Thread.}
WORD{content='But}
WORD{content='now}
WORD{content='all}
WORD{content='the}
WORD{content='information}
WORD{content='for}
WORD{content='a}
WORD{content='particular}
WORD{content='counter}
WORD{content='including}
WORD{content='the}
WORD{content='button}
WORD{content='and}
WORD{content='text}
WORD{content='field}
WORD{content='is}
WORD{content='inside}
WORD{content='its}
WORD{content='own}
WORD{content='object}
WORD{content='that}
WORD{content='is}
WORD{content='inherited}
WORD{content='from}
WORD{content='Thread}

SENTENCE{content=' All the fields in Ticker are private, which means that the Ticker implementation can be changed at will, including the quantity and type of data components to acquire and display information.}
WORD{content='All}
WORD{content='the}
WORD{content='fields}
WORD{content='in}
WORD{content='Ticker}
WORD{content='are}
WORD{content='private}
WORD{content='which}
WORD{content='means}
WORD{content='that}
WORD{content='the}
WORD{content='Ticker}
WORD{content='implementation}
WORD{content='can}
WORD{content='be}
WORD{content='changed}
WORD{content='at}
WORD{content='will}
WORD{content='including}
WORD{content='the}
WORD{content='quantity}
WORD{content='and}
WORD{content='type}
WORD{content='of}
WORD{content='data}
WORD{content='components}
WORD{content='to}
WORD{content='acquire}
WORD{content='and}
WORD{content='display}
WORD{content='information}


LISTING{content='Start listing
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import com.bruceeckel.swing.*;

public class Counter4 extends JApplet {
  private JButton start = new JButton("Start");
  private boolean started = false;
  private Ticker[] s;
  private boolean isApplet = true;
  private int size = 12;
  class Ticker extends Thread {
    private JButton b = new JButton("Toggle");
    private JTextField t = new JTextField(10);
    private int count = 0;
    private boolean runFlag = true;
    public Ticker() {
      b.addActionListener(new ToggleL());
      JPanel p = new JPanel();
      p.add(t);
      p.add(b);
      // Calls JApplet.getContentPane().add():
      getContentPane().add(p);
    }
    class ToggleL implements ActionListener {
      public void actionPerformed(ActionEvent e) {
        runFlag = !runFlag;
      }
    }
    public void run() {
      while (true) {
        if (runFlag)
          t.setText(Integer.toString(count++));
        try {
          sleep(100);
        } catch(InterruptedException e) {
          System.err.println("Interrupted");
        }
      }
    }
  }
}
End listing}

